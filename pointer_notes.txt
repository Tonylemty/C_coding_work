## Pointers

# Introduction

1.Definition:
Pointer is a variables that store address of another variable

2.Example to introduct
eg.
int a = 5;
int *p; -> Computer would allocate a memory address for p, and p is a pointer for interger
p = &a; -> p points to the address of a 
print p -> get the address of a
print &a -> get the address of a
print &p -> get the address of p
print *p -> get the value of 5 -> This calls Dereferencing

-> p is address; *p is a value which is stored in p

------------------------------------------------------------

# Pointer application

1. Pointer to pointer - Example to introduct
eg.
int x = 5;
int *p = &x;
int **q; -> This is a pointer to pointer
q = &p;
int ***r;
r = &q;

printf("%d\n", &x);
printf("%d\n", p); // x memory address
printf("%d\n", *p); // *p = 5
printf("%d\n", *q); // x memory address
printf("%d\n", **q); // **q = 5
printf("%d\n", **r); // x memory address
printf("%d\n", ***r); // ***r = 5

2. Pointer as funciton arguments(Call by reference)
eg.
void Increment(int *p) {
    *p += 1;
}

int main() {

    int a = 10;
    Increment(&a);
    printf("%d", a);   
}

3. Pointer and arrays
eg.
int a[] = {2, 4, 5, 8, 1};
       
for (int i = 0; i < 5; i++) {
printf("Memory address: %d\n", &a[i]); -> address
printf("Memory address: %d\n", a + i); -> address
printf("Value: %d\n", a[i]); -> value
printf("Value: %d\n", *(a + i)); -> value
}
=> &a[i] == (a + i); a[i] == *(a + i)

4. Character arrays and pointers
(1) How to store strings
eg.
char s[5] -> The size of the strings must include '\0'
s[0] = "j"
s[1] = "o"
s[2] = "h"
s[3] = "n"

(2) Arrays and pointers are different type are used in similar manner

(3) Arrays are always passed to function by reference

(4) Constant array
eg. 
char *c = "Hello" -> This array cannot be changed

---------------------------------------------------------------

# Arrays as function arguments

1. Introduction
When the array as function arguments
-> Complier just creates a pointer variable by the same name
-> Complier also creates a data type of the array
-> Complier just copies the address of the first element in the array

=> void (int a[]) == void (int *a)

--------------------------------------------------------

# Pointers and multi-dimensional arrays

1. 2D arrays

(1) How to use pointer to declare a 2D array
eg.
int b[2][3];
int (*p)[3] = b; -> pointer to one dimensional array of three elements

(2) Introduction
b[i][j] = *(b[i] + j) = *(*(b + i) + j)

(3) 2D arrays as function arguments
eg.
void func(int a[][3] or (*a)[3])

(4) The example of 2D arrays
eg.
int b[2][3] = {{2, 3, 6}, {4, 5, 8}}
int (*p)[3] = b
print b or &b[0] => 400
print *b or b[0] or &b[0][0] => 400
print *(b + 1) + 2 or b[1] + 2 or &b[1][2] => 420
print *(*b + 1) => 3

==> When you dereferencing, you can see it as brackets being removed

2. 3D arrays

(1) How to use pointer to declare a 3D array
eg.
int c[3][2][2];
int (*p)[2][2] = c;

(2) Introduction
c[i][j][k] = *(c[i][j] + k) = *(*(c[i] + j) + k)

= *(*(*(c + i) + j) + k)

(3) The example of 3D arrays
eg.
int c[3][2][2]
int (*p)[2][2] = c
print c => 800
print *c or c[0] or &c[0][0] => 800
print (c[0][1] + 1) or c[0][1][1] => 9
print (c[1] + 1) or c[1][1] or &c[1][1][0] => 824

--------------------------------------------------------------------

# Dynamic memory

1. Four segments of the memory

Heap -> Store variables which use "malloc function" to intialize

Stack -> Store all the informations of function calls and all the local variables

Static/Global -> Store all the static or global variables

Code -> Store the instructions that needs to be executed

2. Introductin of funcitons

(1) malloc

Definition
-> void* malloc(size_type size) // size_type must be the positive value or zero

Characteristic
-> Malloc will return a void pointer that give us the address of the first byte in this block
// void pointer cannot be dereferenced

Example
eg. 1
void *p = malloc(sizeof(int)) -> We need memory for just one integer
void *p = malloc(10* sizeof(int)) -> We need memory for ten integer

eg. 2
int *p = (int*)malloc(sizeof(int)) -> This example uses the typecasting to turn the void to integer


(2) calloc

Definition
-> void* calloc(size_type num, size_type size)

Example
eg.
int *p = (int*)calloc(3, sizeof(int))

(3) realloc // Change the size of memory

Defintion
-> void* realloc(void* ptr, size_type size)

Example
eg. 1
int *b = (int*)realloc(a, 2*n*sizeof(int))

eg. 2
int *b = (int*)realloc(a, 0) equivalent to free(a)

eg. 3
int *b = (int*)realloc(NULL, n*sizeof(int)) equivalent to malloc()

(4) free // Dealloc the memory


# Pointers and function 

1. How to declare a pointer to point to the function
eg.
int (*p)(int, int)

2. How to declare a function would return a pointer
eg.
int* func(int, int) -> Declare a function which would return int*

-----------------------------------------------------




